{% comment %} {% include '~~/Assets/Lava/GroupFinder.lava' %} {% endcomment %}
{% assign apiKey = 'Global' | Attribute:'GoogleApiKey' %}
{% javascript id:'googlemapsmarkerclusterer' url:'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js' %}{% endjavascript %}
{% javascript id:'googlemapsapi' url:'{{ "https://maps.googleapis.com/maps/api/js?key=" | Append:apiKey }}' %}{% endjavascript %}
{{ 'https://cdnjs.cloudflare.com/ajax/libs/URI.js/1.19.1/URI.min.js' | AddScriptLink }}

{%- assign currentUrl = 'Global' | Page:'Url' -%}
{%- assign groupViewUrl = "/groups/" -%}
{%- assign daysofweek = "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday" -%}
{%- assign daysofweek = daysofweek | Split:',' -%}
{%- capture noResults -%}<div class="no-results">Unfortunately, we didn't find any groups matching your search. Gather some friends, and start your own group!</div>
{%- endcapture -%}

<style>
  .list-group .checkbox {
    margin-top:5px;
  }

  .btn-filter {
    position: relative;
    margin-bottom: 4px;
  }

  .btn-filter.active:after {
    position: absolute;
    top: 50%;
    right: 10px;
    margin-top: -13px;
    content:'\f00d';
    font-family:"Font Awesome 5 Pro";
    font-weight: 900;
  }

  .btn-filter.active,
  .btn-filter.active:hover,
  .btn-filter.btn-default.active:focus {
    background-color: #6bac43;
    color: #fff;
    box-shadow: none;
    padding-right: 30px;
  }

  footer {
    display: none;
  }

  @-webkit-keyframes rotating /* Safari and Chrome */ {
  from {
    -webkit-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes rotating {
  from {
    -ms-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  to {
    -ms-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -webkit-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
.rotating {
  -webkit-animation: rotating .5s linear infinite;
  -moz-animation: rotating .5s linear infinite;
  -ms-animation: rotating .5s linear infinite;
  -o-animation: rotating .5s linear infinite;
  animation: rotating .5s linear infinite;
}
</style>


{%- assign wrapperId = uniqueid -%}



<div id="group-finder-wrapper" style="margin: -30px;">
  <div class="js-filters soft xs-soft-half" style="width: 50%; overflow-y: auto;">
    <h2 class="push-half-bottom">Find Your Group</h2>
    <div class="form-group push-half-bottom">
      <input type="text" class="form-control" id="exampleInputEmail1" placeholder="Enter Your Zip Code">
    </div>

    {[ accordion ]}
      [[ item title:'Filters' ]]
      <div id="dynamic-content">
        <div class="js-filter-campuses">
          {% assign campusesSorted = Campuses | Sort:'Name' %}
          <h3 class="h5 push-half-bottom">Campus</h3>
          <p>
            {%- for campus in campusesSorted -%}
              {% assign IsPublic = campus | Attribute:'Public' %}
              {%- if campus.IsActive && IsPublic == 'Yes' -%}
                <a href="#" data-key="campuses" data-value="{{ campus.Id }}" class="btn btn-default btn-filter btn-sm js-filter js-{{ campus.Id }}">{{ campus.Name }}</a>
              {%- endif -%}
            {%- endfor -%}
          </p>
          </div>

          <div class="js-filter-days">
          <h3 class="h5 push-half-bottom">Day of the Week</h3>
          <p>
            {%- for day in daysofweek -%}
              <a href="#" data-key="schedules" data-value="{{ day | Downcase}}" class="btn btn-default btn-filter btn-sm js-filter js-{{ day | Downcase}}">{{ day }}</a>
            {%- endfor -%}
          </p>
          </div>

          <div class="js-filter-tags">
          <h3 class="h5 push-half-bottom">Demographic/Focus</h3>
            <p>
            <a href="#" data-key="kidfriendly" data-value="true" class="btn btn-default btn-filter btn-sm js-filter js-kid-friendly">Kid Friendly</a>
            {% assign tags = 52 | FromCache:'DefinedType' %}
            {%- for tag in tags.DefinedValues -%}
              <a href="#" data-key="tags" data-value="{{ tag.Value | Downcase }}" class="btn btn-default btn-filter btn-sm js-filter js-{{ tag.Value | Downcase }}">{{ tag.Value }}</a>
            {%- endfor -%}
            {% assign tags = 69 | FromCache:'DefinedType' %}
            {%- for tag in tags.DefinedValues -%}
              <a href="#" data-key="tags" data-value="{{ tag.Value | Downcase }}" class="btn btn-default btn-filter btn-sm js-filter js-{{ tag.Value | Downcase }}">{{ tag.Value }}</a>
            {%- endfor -%}
            {% assign tags = 70 | FromCache:'DefinedType' %}
            {%- for tag in tags.DefinedValues -%}
              <a href="#" data-key="tags" data-value="{{ tag.Value | Downcase }}" class="btn btn-default btn-filter btn-sm js-filter js-{{ tag.Value | Downcase }}">{{ tag.Value }}</a>
            {%- endfor -%}
            </p>
          </div>
        </div>
      [[ enditem ]]
    {[ endaccordion ]}

    <div id="groups">
      <p class="text-center"><i class="fas fa-lg text-primary fa-spinner-third rotating"></i></p>
    </div>

  </div>

  <div id="map-canvas" class="position-fixed top-zero right-zero bottom-zero" style="width:50%;"></div>
</div>



<script>
$(document).ready(function(){
  var wrapperOffset = $('#navigation').height() + $('#navigation-secondary').height();
  $('#group-finder-wrapper').css('top', wrapperOffset + 'px');
  $('#map-canvas').css('top', wrapperOffset + 'px');

  var defaultLatLng = new google.maps.LatLng(34.0374891,-81.0076046); // Default
  
  drawMap(defaultLatLng); // No geolocation support, show default map

  function drawMap(latlng) {
      var myOptions = {
          center: latlng,
          zoom: 8,
          scrollwheel: false,
          streetViewControl: false,
          styles: [
    {
        "featureType": "landscape.man_made",
        "elementType": "all",
        "stylers": [
            {
                "color": "#faf5ed"
            },
            {
                "lightness": "0"
            },
            {
                "gamma": "1"
            }
        ]
    },
    {
        "featureType": "poi.park",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#bae5a6"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "all",
        "stylers": [
            {
                "weight": "1.00"
            },
            {
                "gamma": "1.8"
            },
            {
                "saturation": "0"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "hue": "#ffb200"
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "lightness": "0"
            },
            {
                "gamma": "1"
            }
        ]
    },
    {
        "featureType": "transit.station.airport",
        "elementType": "all",
        "stylers": [
            {
                "hue": "#b000ff"
            },
            {
                "saturation": "23"
            },
            {
                "lightness": "-4"
            },
            {
                "gamma": "0.80"
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "all",
        "stylers": [
            {
                "color": "#a0daf2"
            }
        ]
    }
],
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          fullscreenControl: false,
          mapTypeControlOptions: {
            mapTypeIds: []
          }
      };
      map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
      // place the infowindow.  Invisible, without content.
      var infowindow = new google.maps.InfoWindow({
          content: '',
      });

      bounds = new google.maps.LatLngBounds();
  }

  $('#dynamic-content').on('click','a',function(e){
      e.preventDefault();
      var targetUrl = $(this).attr('href'),
          targetTitle = $(this).attr('title');

      window.history.pushState({url: "" + targetUrl + ""}, targetTitle, targetUrl);
      findGroups();
      updateFilters();
  });

  findGroups();
  updateFilters();

});

function updateFilters() {
  var currentUrl = window.location.href;
  var uri = URI(window.location.href);
  var query = uri.search(true);

  $('.js-filters .js-filter').each(function(i, obj) {
    filter = $(obj);
    if (URI(window.location.href).hasQuery(filter.data("key"), filter.data("value"), true)) {
      link = URI(window.location.href).removeSearch(filter.data("key"), filter.data("value"));
      filter.addClass("active").attr('href',link);
    } else {
      link = URI(window.location.href).addSearch(filter.data("key"), filter.data("value"));
      filter.removeClass("active").attr('href',link);
    }
  });
}


function findGroups() {
  console.log('finding groups...');
  var currentUrl = window.location.href;
  var uri = URI(window.location.href);
  var query = uri.query();

  $.ajax({
      url: '/api/GroupFinder?' + query,
      dataType: 'json',
      success: function(response) {
        
        console.log('found ' + response.length + ' groups')
        $('#groups').html(" ");

        if(!$.isEmptyObject(response)){
          var markers = response.map(function(item, i) {
            if (item.GroupLocation !== null) {
              var marker = new google.maps.Marker({
                position: new google.maps.LatLng(item.GroupLocation.Latitude, item.GroupLocation.Longitude),
                icon: 'https://s3.amazonaws.com/ns.assets/newspring/mapmarkers/marker.png'
              });

              google.maps.event.addListener(marker, 'click', function() {
                window.location.href = "/groups/" + item.Id;
              });

              bounds.extend(marker.position);

            }

            var groupCard = `
            {[ card title:'${ item.IsActive } ${ item.Id } ${ item.Name }' titlesize:'h3' content:'<p class="push-half-bottom"><span class="label label-info sans-serif letter-spacing-condensed circular">${ item.Distance } miles</span></p><p class="push-half-bottom">${ item.Description }</p>' linkurl:'/groups/${ item.Id }' linktext:'Group Details' ]}
            `
            $('#groups').append(groupCard);

            return marker;
          });

          // Add a marker clusterer to manage the markers.
          var markerCluster = new MarkerClusterer(map, markers, {imagePath: 'https://s3.amazonaws.com/ns.assets/newspring/mapmarkers/m'});
          markerCluster.getStyles().map(function(obj){ return Object.assign(obj, {textColor: 'white',textSize:'13'}) });

          $('#groups').prepend('<h3 class="h5 push-half-bottom">' + response.length + ' groups found</h3>');            

          map.setOptions({ maxZoom: 15 });
          map.fitBounds(bounds);
          map.setOptions({ maxZoom: null });
        } else {
          $('#groups').html('No Results');
        }
      }
  });
}
</script>