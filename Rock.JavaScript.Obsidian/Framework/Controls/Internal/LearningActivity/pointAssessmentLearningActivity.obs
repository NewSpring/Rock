<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel v-if="screenToShow !== ComponentScreen.Completion" :title="panelTitle" :hasFullscreen="true" :class="containerClasses">
        <div v-if="screenToShow === ComponentScreen.Configuration">
            <div class="instructions-section">
                <StructuredContentEditor label="Instructions" v-model="instructions" :disabled="disabled" />
            </div>

            <div class="rubric-section">
                <StructuredContentEditor label="Grading Rubric" v-model="rubric" :disabled="disabled" />
            </div>

            <TextBox v-model="acknowledgedButtonText"
                     label="Button Text"
                     help="The text that will be displayed in the button that allows the student to acknowledge the instructions."
                     rules="required" />
        </div>

        <div v-if="screenToShow === ComponentScreen.Scoring">
            <div class="scoring-section">
                <StructuredContentEditor v-model="rubric" disabled />

                <NumberBox v-model="pointsEarned"
                           label="Score"
                           :min="0"
                           :minimumValue="0"
                           :max="pointsPossible"
                           :rules="'lte:' + pointsPossible"
                           inputGroupClasses="input-width-lg">
                    <template #inputGroupAppend>
                        <span class="input-group-addon">out of {{ pointsPossible }}</span>
                    </template>
                </NumberBox>
            </div>
        </div>

        <div v-if="screenToShow === ComponentScreen.Summary">
            <NotificationBox v-if="hasBeenGraded" alertType="success">
                {{ assignee?.name ?? defaultAssigneeDescription }} assessed this activity.
            </NotificationBox>
            <NotificationBox v-if="!hasBeenGraded" alertType="warning">
                {{ assignee?.name ?? defaultAssigneeDescription }} has not assessed this activity.
            </NotificationBox>
        </div>
    </Panel>

    <div v-if="screenToShow === ComponentScreen.Completion" :class="containerClasses">
        <div class="instructions-section">
            <StructuredContentEditor label="Instructions" v-model="instructions" :disabled="true" />
        </div>

        <div class="footer-button-section">
            <RockButton v-if="!isCompleted"
                        :btnType="BtnType.Primary"
                        :disabled="completeClicked"
                        :autoDisable="true"
                        @click="onCompletedAndClosed">
                {{ completeButtonText }}
            </RockButton>
        </div>
    </div>
</template>
<script setup lang="ts">
    import { computed, ref, toValue, watch, } from "vue";
    import { debounce } from "@Obsidian/Utility/util";
    import Panel from "@Obsidian/Controls/panel.obs";
    import StructuredContentEditor from "@Obsidian/Controls/structuredContentEditor.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { LearningActivityCompletionBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityCompletionDetail/learningActivityCompletionBag";
    import { LearningActivityBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityBag";
    import { learningActivityEmits, learningActivityProps, ComponentScreen, useLearningComponent } from "./learningActivity";
    import { PointAssessmentActivityConfiguration, PointAssessmentActivityCompletion, PointAssessmentActivityDefaults } from "./pointAssessmentLearningActivity.partial";
    import TextBox from "@Obsidian/Controls/textBox.obs";

    // Get the required props and emits for learning activity components.
    const props = defineProps({ ...learningActivityProps });
    const emits = defineEmits({ ...learningActivityEmits });

    // #region Values

    // Get the bags directly from the props when needed (to support the useLearningComponent computedRefs).
    const activityBag = computed(() => props.activityBag);
    const completionBag = computed(() => props.completionBag ?? {} as LearningActivityCompletionBag);
    const screenToShow = computed(() => props.screenToShow ?? ComponentScreen.Summary);

    /** Initialize the base component and destructure the refs we need for use in this component. */
    const {
        acknowledgedButtonText,
        assignee,
        containerClasses,
        defaultAssigneeDescription,
        hasBeenGraded,
        instructions,
        isCompleted,
        pointsPossibleAtCompletion,
        rubric,
        panelTitle
    } = useLearningComponent<PointAssessmentActivityConfiguration, PointAssessmentActivityCompletion>(
        activityBag,
        completionBag,
        screenToShow,
        new PointAssessmentActivityDefaults()
    );

    const disabled = ref(props.disabled ?? false);
    const completeClicked = ref(false);

    const pointsEarned = ref(completionBag.value.pointsEarned);

    // #endregion

    // #region Computed Values

    const pointsPossible = computed((): number => {
        return Number(pointsPossibleAtCompletion?.value ?? activityBag.value.points);
    });

    const completeButtonText = computed((): string => {
        return isCompleted.value === true
            ? "Continue"
            : acknowledgedButtonText?.value ?? "Acknowledged";
    });

    /** Watch for modified component settings. */
    const debouncedActivityBagEmits = debounce(() => {
        const updatedActivityBag = {
            ...toValue(activityBag)
        } as LearningActivityBag;

        updatedActivityBag.activityComponentSettingsJson = JSON.stringify({
            acknowledgedButtonText: acknowledgedButtonText.value,
            instructions: instructions.value,
            rubric: rubric.value
        }) ?? "{}";

        emits("update:activityBag", updatedActivityBag);
    });

    /** Watch for modified component completion. */
    const debouncedCompletionBagEmits = debounce(() => {
        const updatedCompletionBag = {
            ...toValue(completionBag)
        } as LearningActivityCompletionBag;

        updatedCompletionBag.pointsEarned = pointsEarned.value;

        emits("update:completionBag", updatedCompletionBag);
    });

    // #region Event Handlers

    function onCompletedAndClosed(): void {
        if (isCompleted.value === false) {
            emits("completed", true);
            completeClicked.value = true;
        }

        emits("closed");
    }

    // #endregion

    watch([activityBag.value.points, instructions, rubric, acknowledgedButtonText], () => {
        debouncedActivityBagEmits();
    }, { deep: true });

    watch([pointsEarned], () => {
        debouncedCompletionBagEmits();
    }, { deep: true });
</script>