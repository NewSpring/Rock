<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <SlidingDateRangePicker v-model="slidingDateRange"
                                label="Date Range"
                                :enabledSlidingDateRangeUnits="enabledSlidingDateRangeUnits" />
    </Modal>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import SlidingDateRangePicker from "@Obsidian/Controls/slidingDateRangePicker.obs";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { RangeType, SlidingDateRange } from "@Obsidian/Utility/slidingDateRange";
    import { deepEqual } from "@Obsidian/Utility/util";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const enabledSlidingDateRangeUnits: RangeType[] = [
        RangeType.Last,
        RangeType.Current,
        RangeType.DateRange,
        RangeType.Previous
    ];

    // #region Values

    const slidingDateRange = ref<SlidingDateRange | null>(props.modelValue.slidingDateRange);
    const isVisible = useVModelPassthrough(props, "visible", emit);

    // #endregion Values

    // #region Event Handlers

    /**
     * Called when the save button is clicked.
     */
    function onSave(): void {
        const value: GridSettingsOptions = {
            slidingDateRange: slidingDateRange.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    // #endregion Event Handlers

    // #region Watchers

    watch(() => props.modelValue, () => {
        slidingDateRange.value = props.modelValue.slidingDateRange;
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });

    // #endregion Watchers
</script>
